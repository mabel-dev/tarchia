# generated by fastapi-codegen:
#   filename:  rest-catalog-open-api.yaml
#   timestamp: 2024-05-08T23:24:10+00:00

from __future__ import annotations

from typing import Optional
from typing import Union

from fastapi import FastAPI
from fastapi import Header
from fastapi import Query
from pydantic import conint
from starlette.requests import Request

from .models import CatalogConfig
from .models import CommitTableRequest
from .models import CommitTableResponse
from .models import CommitTransactionRequest
from .models import CommitViewRequest
from .models import CreateNamespaceRequest
from .models import CreateNamespaceResponse
from .models import CreateTableRequest
from .models import CreateViewRequest
from .models import ErrorModel
from .models import GetNamespaceResponse
from .models import IcebergErrorResponse
from .models import ListNamespacesResponse
from .models import ListTablesResponse
from .models import LoadTableResult
from .models import LoadViewResult
from .models import OAuthError
from .models import OAuthTokenResponse
from .models import PageToken
from .models import RegisterTableRequest
from .models import RenameTableRequest
from .models import ReportMetricsRequest1
from .models import Snapshots
from .models import UpdateNamespacePropertiesRequest
from .models import UpdateNamespacePropertiesResponse
from .models import XIcebergAccessDelegation

app = FastAPI(
    title='Apache Iceberg REST Catalog API',
    license={'name': 'Apache 2.0', 'url': 'https://www.apache.org/licenses/LICENSE-2.0.html'},
    version='0.0.1',
    description='Defines the specification for the first version of the REST Catalog API. Implementations should ideally support both Iceberg table specs v1 and v2, with priority given to v2.',
    servers=[
        {
            'url': '{scheme}://{host}/{basePath}',
            'description': 'Server URL when the port can be inferred from the scheme',
            'variables': {
                'scheme': {
                    'description': 'The scheme of the URI, either http or https.',
                    'default': 'https',
                },
                'host': {
                    'description': 'The host address for the specified server',
                    'default': 'localhost',
                },
                'basePath': {
                    'description': 'Optional prefix to be appended to all routes',
                    'default': '',
                },
            },
        },
        {
            'url': '{scheme}://{host}:{port}/{basePath}',
            'description': 'Generic base server URL, with all parts configurable',
            'variables': {
                'scheme': {
                    'description': 'The scheme of the URI, either http or https.',
                    'default': 'https',
                },
                'host': {
                    'description': 'The host address for the specified server',
                    'default': 'localhost',
                },
                'port': {'description': 'The port used when addressing the host', 'default': '443'},
                'basePath': {
                    'description': 'Optional prefix to be appended to all routes',
                    'default': '',
                },
            },
        },
    ],
)


@app.get(
    '/v1/config',
    response_model=None,
    responses={
        '200': {'model': CatalogConfig},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Configuration API'],
)
def get_config(
    warehouse: Optional[str] = None,
) -> Optional[Union[CatalogConfig, IcebergErrorResponse]]:
    """
    List all catalog configuration settings
    """
    pass


@app.post(
    '/v1/oauth/tokens',
    response_model=None,
    responses={
        '200': {'model': OAuthTokenResponse},
        '400': {'model': OAuthError},
        '401': {'model': OAuthError},
        '5XX': {'model': OAuthError},
    },
    tags=['OAuth2 API'],
)
def get_token(request: Request) -> Optional[Union[OAuthTokenResponse, OAuthError]]:
    """
    Get a token using an OAuth2 flow
    """
    pass


@app.get(
    '/v1/{prefix}/namespaces',
    response_model=None,
    responses={
        '200': {'model': ListNamespacesResponse},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def list_namespaces(
    page_token: Optional[PageToken] = Query(None, alias='pageToken'),
    page_size: Optional[conint(ge=1)] = Query(None, alias='pageSize'),
    parent: Optional[str] = None,
    prefix: str = ...,
) -> Optional[Union[ListNamespacesResponse, IcebergErrorResponse]]:
    """
    List namespaces, optionally providing a parent namespace to list underneath
    """
    pass


@app.post(
    '/v1/{prefix}/namespaces',
    response_model=None,
    responses={
        '200': {'model': CreateNamespaceResponse},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '406': {'model': ErrorModel},
        '409': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def create_namespace(
    prefix: str, body: CreateNamespaceRequest = ...
) -> Optional[Union[CreateNamespaceResponse, IcebergErrorResponse, ErrorModel]]:
    """
    Create a namespace
    """
    pass


@app.get(
    '/v1/{prefix}/namespaces/{namespace}',
    response_model=None,
    responses={
        '200': {'model': GetNamespaceResponse},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def load_namespace_metadata(
    prefix: str, namespace: str = ...
) -> Optional[Union[GetNamespaceResponse, IcebergErrorResponse]]:
    """
    Load the metadata properties for a namespace
    """
    pass


@app.head(
    '/v1/{prefix}/namespaces/{namespace}',
    response_model=None,
    responses={
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def namespace_exists(prefix: str, namespace: str = ...) -> Optional[IcebergErrorResponse]:
    """
    Check if a namespace exists
    """
    pass


@app.delete(
    '/v1/{prefix}/namespaces/{namespace}',
    response_model=None,
    responses={
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def drop_namespace(prefix: str, namespace: str = ...) -> Optional[IcebergErrorResponse]:
    """
    Drop a namespace from the catalog. Namespace must be empty.
    """
    pass


@app.post(
    '/v1/{prefix}/namespaces/{namespace}/properties',
    response_model=None,
    responses={
        '200': {'model': UpdateNamespacePropertiesResponse},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '406': {'model': ErrorModel},
        '422': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def update_properties(
    prefix: str, namespace: str = ..., body: UpdateNamespacePropertiesRequest = ...
) -> Optional[Union[UpdateNamespacePropertiesResponse, IcebergErrorResponse, ErrorModel]]:
    """
    Set or remove properties on a namespace
    """
    pass


@app.post(
    '/v1/{prefix}/namespaces/{namespace}/register',
    response_model=None,
    responses={
        '200': {'model': LoadTableResult},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '409': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def register_table(
    prefix: str, namespace: str = ..., body: RegisterTableRequest = ...
) -> Optional[Union[LoadTableResult, IcebergErrorResponse]]:
    """
    Register a table in the given namespace using given metadata file location
    """
    pass


@app.get(
    '/v1/{prefix}/namespaces/{namespace}/tables',
    response_model=None,
    responses={
        '200': {'model': ListTablesResponse},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def list_tables(
    page_token: Optional[PageToken] = Query(None, alias='pageToken'),
    page_size: Optional[conint(ge=1)] = Query(None, alias='pageSize'),
    prefix: str = ...,
    namespace: str = ...,
) -> Optional[Union[ListTablesResponse, IcebergErrorResponse]]:
    """
    List all table identifiers underneath a given namespace
    """
    pass


@app.post(
    '/v1/{prefix}/namespaces/{namespace}/tables',
    response_model=None,
    responses={
        '200': {'model': LoadTableResult},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '409': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def create_table(
    x__iceberg__access__delegation: Optional[XIcebergAccessDelegation1] = Header(
        None, alias='X-Iceberg-Access-Delegation'
    ),
    prefix: str = ...,
    namespace: str = ...,
    body: CreateTableRequest = ...,
) -> Optional[Union[LoadTableResult, IcebergErrorResponse]]:
    """
    Create a table in the given namespace
    """
    pass


@app.get(
    '/v1/{prefix}/namespaces/{namespace}/tables/{table}',
    response_model=None,
    responses={
        '200': {'model': LoadTableResult},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def load_table(
    x__iceberg__access__delegation: Optional[XIcebergAccessDelegation3] = Header(
        None, alias='X-Iceberg-Access-Delegation'
    ),
    snapshots: Optional[Snapshots1] = None,
    prefix: str = ...,
    namespace: str = ...,
    table: str = ...,
) -> Optional[Union[LoadTableResult, IcebergErrorResponse]]:
    """
    Load a table from the catalog
    """
    pass


@app.post(
    '/v1/{prefix}/namespaces/{namespace}/tables/{table}',
    response_model=None,
    responses={
        '200': {'model': CommitTableResponse},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '409': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '500': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '502': {'model': IcebergErrorResponse},
        '504': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def update_table(
    prefix: str, namespace: str = ..., table: str = ..., body: CommitTableRequest = ...
) -> Optional[Union[CommitTableResponse, IcebergErrorResponse]]:
    """
    Commit updates to a table
    """
    pass


@app.delete(
    '/v1/{prefix}/namespaces/{namespace}/tables/{table}',
    response_model=None,
    responses={
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def drop_table(
    purge_requested: Optional[bool] = Query(False, alias='purgeRequested'),
    prefix: str = ...,
    namespace: str = ...,
    table: str = ...,
) -> Optional[IcebergErrorResponse]:
    """
    Drop a table from the catalog
    """
    pass


@app.head(
    '/v1/{prefix}/namespaces/{namespace}/tables/{table}',
    response_model=None,
    responses={
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def table_exists(
    prefix: str, namespace: str = ..., table: str = ...
) -> Optional[IcebergErrorResponse]:
    """
    Check if a table exists
    """
    pass


@app.post(
    '/v1/{prefix}/namespaces/{namespace}/tables/{table}/metrics',
    response_model=None,
    responses={
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def report_metrics(
    prefix: str,
    namespace: str = ...,
    table: str = ...,
    body: Union[ReportMetricsRequest1, ReportMetricsRequest2] = ...,
) -> Optional[IcebergErrorResponse]:
    """
    Send a metrics report to this endpoint to be processed by the backend
    """
    pass


@app.get(
    '/v1/{prefix}/namespaces/{namespace}/views',
    response_model=None,
    responses={
        '200': {'model': ListTablesResponse},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': ErrorModel},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def list_views(
    page_token: Optional[PageToken] = Query(None, alias='pageToken'),
    page_size: Optional[conint(ge=1)] = Query(None, alias='pageSize'),
    prefix: str = ...,
    namespace: str = ...,
) -> Optional[Union[ListTablesResponse, IcebergErrorResponse, ErrorModel]]:
    """
    List all view identifiers underneath a given namespace
    """
    pass


@app.post(
    '/v1/{prefix}/namespaces/{namespace}/views',
    response_model=None,
    responses={
        '200': {'model': LoadViewResult},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': ErrorModel},
        '409': {'model': ErrorModel},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def create_view(
    prefix: str, namespace: str = ..., body: CreateViewRequest = ...
) -> Optional[Union[LoadViewResult, IcebergErrorResponse, ErrorModel]]:
    """
    Create a view in the given namespace
    """
    pass


@app.get(
    '/v1/{prefix}/namespaces/{namespace}/views/{view}',
    response_model=None,
    responses={
        '200': {'model': LoadViewResult},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': ErrorModel},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def load_view(
    prefix: str, namespace: str = ..., view: str = ...
) -> Optional[Union[LoadViewResult, IcebergErrorResponse, ErrorModel]]:
    """
    Load a view from the catalog
    """
    pass


@app.post(
    '/v1/{prefix}/namespaces/{namespace}/views/{view}',
    response_model=None,
    responses={
        '200': {'model': LoadViewResult},
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': ErrorModel},
        '409': {'model': ErrorModel},
        '419': {'model': IcebergErrorResponse},
        '500': {'model': ErrorModel},
        '503': {'model': IcebergErrorResponse},
        '502': {'model': ErrorModel},
        '504': {'model': ErrorModel},
        '5XX': {'model': ErrorModel},
    },
    tags=['Catalog API'],
)
def replace_view(
    prefix: str, namespace: str = ..., view: str = ..., body: CommitViewRequest = ...
) -> Optional[Union[LoadViewResult, IcebergErrorResponse, ErrorModel]]:
    """
    Replace a view
    """
    pass


@app.delete(
    '/v1/{prefix}/namespaces/{namespace}/views/{view}',
    response_model=None,
    responses={
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': ErrorModel},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def drop_view(
    prefix: str, namespace: str = ..., view: str = ...
) -> Optional[Union[IcebergErrorResponse, ErrorModel]]:
    """
    Drop a view from the catalog
    """
    pass


@app.head(
    '/v1/{prefix}/namespaces/{namespace}/views/{view}',
    response_model=None,
    responses={
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def view_exists(
    prefix: str, namespace: str = ..., view: str = ...
) -> Optional[IcebergErrorResponse]:
    """
    Check if a view exists
    """
    pass


@app.post(
    '/v1/{prefix}/tables/rename',
    response_model=None,
    responses={
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '406': {'model': ErrorModel},
        '409': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def rename_table(
    prefix: str, body: RenameTableRequest = ...
) -> Optional[Union[IcebergErrorResponse, ErrorModel]]:
    """
    Rename a table from its current name to a new name
    """
    pass


@app.post(
    '/v1/{prefix}/transactions/commit',
    response_model=None,
    responses={
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': IcebergErrorResponse},
        '409': {'model': IcebergErrorResponse},
        '419': {'model': IcebergErrorResponse},
        '500': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '502': {'model': IcebergErrorResponse},
        '504': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def commit_transaction(
    prefix: str, body: CommitTransactionRequest = ...
) -> Optional[IcebergErrorResponse]:
    """
    Commit updates to multiple tables in an atomic operation
    """
    pass


@app.post(
    '/v1/{prefix}/views/rename',
    response_model=None,
    responses={
        '400': {'model': IcebergErrorResponse},
        '401': {'model': IcebergErrorResponse},
        '403': {'model': IcebergErrorResponse},
        '404': {'model': ErrorModel},
        '406': {'model': ErrorModel},
        '409': {'model': ErrorModel},
        '419': {'model': IcebergErrorResponse},
        '503': {'model': IcebergErrorResponse},
        '5XX': {'model': IcebergErrorResponse},
    },
    tags=['Catalog API'],
)
def rename_view(
    prefix: str, body: RenameTableRequest = ...
) -> Optional[Union[IcebergErrorResponse, ErrorModel]]:
    """
    Rename a view from its current name to a new name
    """
    pass
